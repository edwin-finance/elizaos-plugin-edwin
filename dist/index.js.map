{"version":3,"sources":["../src/provider.ts","../src/actions.ts","../src/index.ts"],"sourcesContent":["import type { Provider, IAgentRuntime } from \"@elizaos/core\";\nimport { Edwin } from \"edwin-sdk\";\nimport { EdwinConfig } from \"edwin-sdk\";\n\n// Static variable to hold the singleton instance\nlet edwinRunningInstance: Edwin | null = null;\n\nexport async function getEdwinClient(): Promise<Edwin> {\n    // If instance exists, return it\n    if (edwinRunningInstance) {\n        return edwinRunningInstance;\n    }\n    // Otherwise create new instance\n    const edwinConfig: EdwinConfig = {\n        evmPrivateKey: process.env.EVM_PRIVATE_KEY as `0x${string}`,\n        solanaPrivateKey: process.env.SOLANA_PRIVATE_KEY as string,\n        actions: [\"supply\", \"withdraw\", \"stake\", \"getPools\", \"addLiquidity\"],\n    };\n\n    edwinRunningInstance = new Edwin(edwinConfig);\n    return edwinRunningInstance;\n}\n\nexport const edwinProvider: Provider = {\n    async get(runtime: IAgentRuntime): Promise<string | null> {\n        try {\n            const edwin = await getEdwinClient();\n            return edwin.getPortfolio();\n        } catch (error) {\n            console.error(\"Error in Edwin provider:\", error);\n            return null;\n        }\n    },\n};\n","import {\n    type Action,\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    generateObjectDeprecated,\n} from \"@elizaos/core\";\n\nimport { Edwin, EdwinAction } from \"edwin-sdk\";\n\ntype GetEdwinActionsParams = {\n    getClient: () => Promise<Edwin>;\n};\n\n/**\n * Get all edwin actions\n */\nexport async function getEdwinActions({\n    getClient,\n}: GetEdwinActionsParams): Promise<Action[]> {\n    const edwin = await getClient();\n    const edwinActions = await edwin.getActions();\n    const actions = edwinActions.map((action: EdwinAction) => ({\n        name: action.name.toUpperCase(),\n        description: action.description,\n        similes: [],\n        validate: async () => true,\n        handler: async (\n            runtime: IAgentRuntime,\n            message: Memory,\n            state: State | undefined,\n            options?: Record<string, unknown>,\n            callback?: HandlerCallback\n        ): Promise<boolean> => {\n            try {\n                const client = await getClient();\n                if (!state) {\n                    state = (await runtime.composeState(message)) as State;\n                } else {\n                    state = await runtime.updateRecentMessageState(state);\n                }\n                const parameterContext = composeContext({\n                    state,\n                    template: action.template,\n                });\n                const parameters = await generateObjectDeprecated({\n                    runtime,\n                    context: parameterContext,\n                    modelClass: ModelClass.LARGE,\n                });\n                const result = await executeAction(action, parameters, client);\n                const responseContext = composeResponseContext(\n                    action,\n                    result,\n                    state\n                );\n                const response = await generateResponse(\n                    runtime,\n                    responseContext\n                );\n                callback?.({ text: response, content: result });\n                return true;\n            } catch (error) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                callback?.({\n                    text: `Error executing action ${action.name}: ${errorMessage}`,\n                    content: { error: errorMessage },\n                });\n                return false;\n            }\n        },\n        examples: [],\n    }));\n    return actions;\n}\n\nasync function executeAction(\n    action: EdwinAction,\n    parameters: any,\n    edwin: Edwin\n): Promise<unknown> {\n    const result = await action.execute(parameters);\n    return result;\n}\n\nfunction composeResponseContext(\n    action: EdwinAction,\n    result: unknown,\n    state: State\n): string {\n    const responseTemplate = `\n# Action Examples\n{{actionExamples}}\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\nThe action \"${action.name}\" was executed successfully.\nHere is the result:\n${JSON.stringify(result)}\n\n{{actions}}\n\nRespond to the message knowing that the action was successful and these were the previous messages:\n{{recentMessages}}\n`;\n    const context = composeContext({ state, template: responseTemplate });\n    return context;\n}\n\nasync function generateResponse(\n    runtime: IAgentRuntime,\n    context: string\n): Promise<string> {\n    const response = await generateText({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n    });\n    return response;\n}\n","import type { Plugin } from \"@elizaos/core\";\nimport { edwinProvider, getEdwinClient } from \"./provider\";\nimport { getEdwinActions } from \"./actions\";\n\n// Initial banner\nconsole.log(\"\\n┌═════════════════════════════════════┐\");\nconsole.log(\"│            EDWIN PLUGIN             │\");\nconsole.log(\"│                 ,_,                 │\");\nconsole.log(\"│                (o,o)                │\");\nconsole.log(\"│                {`\\\"'}                │\");\nconsole.log(\"│                -\\\"-\\\"-                │\");\nconsole.log(\"├─────────────────────────────────────┤\");\nconsole.log(\"│  Initializing Edwin Plugin...       │\");\nconsole.log(\"│  Version: 0.0.1                     │\");\nconsole.log(\"└═════════════════════════════════════┘\");\n\nexport const edwinPlugin: Plugin = {\n    name: \"[Edwin] Integration\",\n    description: \"Edwin integration plugin\",\n    providers: [edwinProvider],\n    evaluators: [],\n    services: [],\n    actions: await getEdwinActions({\n        getClient: getEdwinClient,\n    }),\n};\n\nexport default edwinPlugin;\n"],"mappings":"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","names":[]}